package com.TestScripts;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;
import java.util.concurrent.TimeUnit;

import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.support.PageFactory;

import com.TestScripts.RetryTest.Retry;
//import com.applitools.eyes.Eyes;
//import com.applitools.eyes.RectangleSize;
import com.gui_auto.base_classes.GUI_automation_base;
import com.gui_auto.base_classes.GUI_automation_properties;
import com.gui_auto.dao.ReadAndUpdate;
import com.gui_auto.pages.DCPage;
import com.gui_auto.pages.DSF_Integration_Page;
import com.gui_auto.pages.JobPlanningPage;
import com.gui_auto.pages.Login;
import com.gui_auto.pages.RegisterPage;
import com.gui_auto.pages.Storefront;
import com.gui_auto.pages.WorkflowIntegrationPage;
import com.gui_auto.utilities.CommonFunctions;
import com.gui_auto.utilities.Locators;
import com.gui_auto.utilities.ScreenShot;

public class PaceWorkflow_5_1 extends GUI_automation_base
{
	ReadAndUpdate dbConnection = new ReadAndUpdate();
	ScreenShot TakeScreenshot = new ScreenShot();
	String browser =  _properties.getProperty(GUI_automation_properties.BASEURL);
	String sFile = _properties.getProperty(GUI_automation_properties.ScreenShotPath);
	//public static Eyes eyes;

	long maxWait = 10000;
	File directory = new File(sFile);

	private RegisterPage _register;
	RetryTest Retry = new RetryTest();

	@Rule
	public Retry retry = Retry.new Retry(1);

	@Before
	public void setUp() throws Exception
	{		
		//eyes = new Eyes();
		//eyes.setApiKey("U4H2HXkiij105f7H1jedc103H9d2tRA8Hdua6DepWhuic110");
		//eyes.setForceFullPageScreenshot(true);
	}

	public String dateReturn()
	{	
		Date date = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy-HH:mm");
		return sdf.format(date);
	}

	public static int randInt(int min, int max) 
	{

		// Usually this can be a field rather than a method variable
		Random rand = new Random();

		// nextInt is normally exclusive of the top value,
		// so add 1 to make it inclusive
		int randomNum = rand.nextInt((max - min) + 1) + min;

		return randomNum;
	}

	@After
	public void tearDown() throws Exception 
	{		   
		_driver.quit();
	}

	@Test
	public void TC_5_1 () throws Exception
	{		
		// ======================================================================= 
		//Constant ones....
		// ======================================================================= 

		String sSheetName = "IntegrationWF";
		String  sScenario = "WorkFlow";
		String  sTestcase = "TC_5";
		String dater = dateReturn();
		dbConnection.UpdateFunction(sSheetName,sScenario,sTestcase,"Executed_On",dater);
		// ======================================================================== 
		String Exec_Required =  dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "Execution_Required");
		dbConnection.UpdateFunction("PresentWorkflow", "PresentWorkflow", "PresentWorkflow", "TestCase_Executing", "TC_5");

		if (Exec_Required.equalsIgnoreCase("Yes"))
		{
			try
			{
				// =========================================  PACE prerequisites ============================================ 
				String PaceURL = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "PACEURL");
				String PaceUserN = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "PACEUserName");
				String PacePass = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "PACEPassword");
				String PaceCompany = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "PACECompany");
				String PaceServer = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "PACEServer");
				String PaceConnectID = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "PaceConnect");

				super.setUp(getBrowser());
				_register = PageFactory.initElements(_driver, RegisterPage.class);
				_register.launchapplication(PaceURL);
				_driver.manage().window().maximize();
				_driver.manage().timeouts().implicitlyWait(20,TimeUnit.SECONDS);

				WorkflowIntegrationPage WIP = new WorkflowIntegrationPage(_driver);
				DCPage DC = new DCPage(_driver);

				System.out.println("Loging in to Pace");
				DC.EpaceLogin(PaceUserN, PacePass, PaceCompany);

				System.out.println("Disable the Scheduling and printflow Pace Connects");
				WIP.DisableEnablePaceConnects("Scheduling", "disable", PaceServer, PaceCompany);
				WIP.DisableEnablePaceConnects("Printflow", "disable", PaceServer, PaceCompany);

				System.out.println("Enable the DSF Pace Connect");
				WIP.ModifyPaceConnect(PaceConnectID, "enable", PaceServer, PaceCompany);

				System.out.println("Enable the Process Shipper Pace Connects");
				WIP.DisableEnablePaceConnects("Smartlinc Process Shipper", "enable", PaceServer, PaceCompany);

				DC.Logout();

				// =====================================  Place DSF order for Adhoc product + FG Item ============================== 
				String SiteUrl = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "SiteUrl");
				String userName = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "USERNAME");
				String passWord = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "PASSWORD");
				String ProductName = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "ProductName");
				String product_qty = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "Product_Qty");				
				String DeliveryMethod = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "DeliveryMethod");
				String PaymentMethod = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "PaymentMethod");
				String CreditCardNumber = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "CreditCardNumber");
				String ExpirationMonth = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "ExpirationMonth");
				String ExpirationYear = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "ExpirationYear");

				_register.launchapplication(SiteUrl);
				_driver.manage().window().maximize();
				_driver.manage().timeouts().implicitlyWait(20,TimeUnit.SECONDS);

				Login Login1 = new Login(_driver);
				Buyyer_Work_flow bwf = new Buyyer_Work_flow();
				Storefront sfront = new Storefront(_driver);
				DSF_Integration_Page DSF = new DSF_Integration_Page(_driver);

				//Login as user
				Login1.LoginToDSF(sSheetName, sScenario, sTestcase, userName, passWord);

				//Clear Cart
				CommonFunctions.ClearCart(_driver);

				//add product to cart
				bwf.Search_Product_smart_store_Npp(ProductName, product_qty);

				//Proceed to check out
				bwf.Click_On_ProceedTOCheckOut();

				//Select a deliverymethod
				sfront.choose_ShipmentMethodBasedOnValue(DeliveryMethod);

				//Click on proceed to payment button
				sfront.ProceedToPayment();

				//Choose the credit card payment option
				bwf.choose_CreditCardPaymentPethod(PaymentMethod);
				bwf.enterCreditCardDetails(CreditCardNumber, ExpirationMonth, ExpirationYear);

				//place order
				bwf.click_on_PlaceMyOrder();
				String orderNum = bwf.fetch_OrderNumber();
				System.out.println("DSF Order No is ::"+orderNum);

				String subTotalValue_Before_code_apply = _driver.findElement(By.xpath(Locators.getProperty(Locators.Cart_Subtotal_value))).getText();
				String ShippingAmount_Before_code_apply =  _driver.findElement(By.xpath(Locators.getProperty(Locators.Cart_Shipping_value))).getText();
				String TotalValue_Before_code_apply = _driver.findElement(By.xpath(Locators.getProperty(Locators.Cart_Total))).getText();
				String TaxCharge_Before_code_apply = _driver.findElement(By.xpath(Locators.getProperty(Locators.Tax_Charges))).getText();
				String HandlingCharge_Before_code_apply = _driver.findElement(By.xpath(Locators.getProperty(Locators.Handling_Charges))).getText();
				System.out.println("Shipping amount :"+ShippingAmount_Before_code_apply);
				System.out.println("SubTotal Value :"+subTotalValue_Before_code_apply);
				System.out.println("Total Value :"+TotalValue_Before_code_apply);
				System.out.println("Tax Charge :"+TaxCharge_Before_code_apply);
				System.out.println("Handling :"+HandlingCharge_Before_code_apply);

				dbConnection.UpdateFunction(sSheetName, sScenario, sTestcase, "DSFSubTotal",subTotalValue_Before_code_apply);
				dbConnection.UpdateFunction(sSheetName, sScenario, sTestcase, "DSFShippingAmount",ShippingAmount_Before_code_apply);
				dbConnection.UpdateFunction(sSheetName, sScenario, sTestcase, "DSFTotalAmt",TotalValue_Before_code_apply);
				dbConnection.UpdateFunction(sSheetName, sScenario, sTestcase, "DSFTaxAmount",TaxCharge_Before_code_apply);
				dbConnection.UpdateFunction(sSheetName, sScenario, sTestcase, "DSFHandlingAmount",HandlingCharge_Before_code_apply);				
				dbConnection.UpdateFunction(sSheetName, sScenario, sTestcase, "Order_Number", orderNum);				

				Login1.Logout();

				// ============================================== verify credit card transaction ======================================= 
				//Login as administrator user
				System.out.println("Loging in to DSF");
				Login1.LoginToDSF(sSheetName, sScenario, sTestcase, "administrator", "administrator");

				//naviagte to administartion page			
				sfront.navigateToAdministrationPage();

				//navigate to credit card management page
				CommonFunctions.Wait(_driver, By.xpath(Locators.getProperty(Locators.Storefront_CreditCart_Link)));
				CommonFunctions.ClickElement(_driver, By.id(Locators.getProperty(Locators.Storefront_CreditCart_Link)));
				CommonFunctions.waitForPageLoaded(_driver);
				CommonFunctions.Wait(_driver, By.xpath(Locators.getProperty(Locators.CCTransactions)));

				CommonFunctions.ClickElement(_driver, By.id(Locators.getProperty(Locators.CCTransactions)));
				CommonFunctions.waitForPageLoaded(_driver);
				CommonFunctions.Wait(_driver, By.id(Locators.getProperty(Locators.CCTransactions)));

				//verify the credit card transaction for the order placed in DSF
				String sTransactionType = CommonFunctions.getText(_driver, By.xpath("//table[@id = 'ctl00_ctl00_C_M_DataGridTransactions']/tbody/tr[2]/td[3]"));
				String sOrderNumber = CommonFunctions.getText(_driver, By.xpath("//table[@id = 'ctl00_ctl00_C_M_DataGridTransactions']/tbody/tr[2]/td[7]/a"));

				if (sTransactionType.equals("Authorization") && sOrderNumber.equals(orderNum))
				{
					System.out.println("Credit card transaction of transaction type Authorization was created succesfully");
				}
				else
				{
					System.err.println("Credit card transaction of transaction type Authorization was NOT created");
					Assert.fail("Credit card transaction of transaction type Authorization was NOT created");
				}				
				DSF.Logout();

				// ========================================== verify Job in Pace ============================================================= 								
				String sJobNumber = "";

				_register.launchapplication(PaceURL);
				_driver.manage().window().maximize();
				_driver.manage().timeouts().implicitlyWait(20,TimeUnit.SECONDS);
				//_driver = eyes.open(_driver, "PACE", "TC_5_1", new RectangleSize(1008, 705));

				JobPlanningPage JP = new JobPlanningPage(_driver);

				System.out.println("Loging in to Pace");
				DC.EpaceLogin(PaceUserN, PacePass, PaceCompany);

				// ========================================================================== 
				// ====================== Fetch Job Number using order number ================= 
				// ========================================================================== 
				System.out.println("Fetch Job Number using order number");

				String orderNumber = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "Order_Number");
				String sPaceConnect = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "PaceConnect");

				DSF.NavigateToActivePaceConnect(sPaceConnect, PaceServer, PaceCompany);
				CommonFunctions.ClickElement(_driver, By.xpath("//a[text() = 'Successful Executions']"));
				while (!(CommonFunctions.isTextPresentOnPage(_driver, "for DSF Order#"+orderNumber)))
				{
					_driver.navigate().refresh();
					CommonFunctions.waitForPageLoaded(_driver);
					Thread.sleep(1000);
					CommonFunctions.ClickElement(_driver, By.xpath("//a[text() = 'Successful Executions']"));
				}

				sJobNumber = WIP.FetchJobNumber(orderNumber, PaceServer, PaceCompany);
				if(!sJobNumber.equals(""))
				{
					dbConnection.UpdateFunction(sSheetName, sScenario, sTestcase, "PACE_Job_Num", sJobNumber);
					String sJobDescription = CommonFunctions.GetValue(_driver, By.name(Locators.getProperty(Locators.Description)));
					dbConnection.UpdateFunction(sSheetName, sScenario, sTestcase, "Job_Description", sJobDescription);
				}
				else
				{
					Assert.fail("Job Not Created for above Order Number");
				}
				TakeScreenshot.ScreenShotWindow(_driver, "JobDetails");
				_driver.manage().window().maximize();
				Thread.sleep(2000);

				// ========================================================================== 
				// ================================ Verify Job Products ====================== 
				// ========================================================================== 
				System.out.println("Verify Job Products");

				CommonFunctions.ClickElement(_driver, By.xpath("//a[text() = 'Products']"));

				String totalRecordsProducts = _driver.findElement(By.xpath("//fieldset[@id = 'JobProducts_fieldset']/div/div[1]/div[1]/strong")).getText();
				System.out.println("totalProducts: "+totalRecordsProducts);
				if (totalRecordsProducts.equals("1"))
				{
					String product1Name = _driver.findElement(By.xpath("//div[@class = 'table-contents']/table[@id = 'JobProducts']/tbody/tr[1]/td[3]/input")).getAttribute("value");
					String sPro1 = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "ProductName");

					if(product1Name.equals(sPro1))
					{
						System.out.println("Job Product Names have been verified");
					}
					else
					{
						System.err.println("Product 1 = "+product1Name);
						Assert.fail("Product 1 = "+product1Name);
					}
				}
				else
				{
					System.err.println("Total Products created are incorrect, Expected = 1, Actual = "+totalRecordsProducts);
					Assert.fail("Total Products created are incorrect, Expected = 1, Actual = "+totalRecordsProducts);
				}

				// ========================================================================== 
				// ========== Verify Job Value, Shipping, Handling and Taxes Amount in Billing Tab ========== 
				// ========================================================================== 
				System.out.println("Verify Job Value,W2P Shipping,W2P Handling and W2P Taxes AMount in Billing Tab");

				String sJobValue = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "DSFSubTotal");
				String sTax = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "DSFTaxAmount");
				String sShipping = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "DSFShippingAmount");
				String sHandling = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "DSFHandlingAmount");

				boolean IsBillingDetailsVerified = DSF.Verify_JobValue_Shipping_Handling_Taxes_Amount_On_Job_Billing_Tab(sJobValue, sTax, sShipping, sHandling);

				if(IsBillingDetailsVerified == true)
				{
					System.out.println("Verified Job Value, W2P Shipping, W2P Handling and W2P Taxes field is not editable in Billing Tab");
				}
				else
				{
					Assert.fail("Failed to Verify Job Value, W2P Shipping, W2P Handling and W2P Taxes Amount in pace. IsNotEditableSuccess is "+IsBillingDetailsVerified);
				}

				System.out.println("Verify payment method in pace for DSF order");

				String[] PaymentOption_And_Value =  DSF.Verify_The_Payment_Mode_In_Pace();
				if(PaymentOption_And_Value[0].equals(PaymentMethod) || PaymentOption_And_Value[1].equals("XXXXXXXXXXXX1111"))
				{
					System.out.println("The Payment Mode displayed are correct");
				}
				else
				{
					System.err.println("Payment Method, Expected = "+PaymentMethod+", Actual =  "+PaymentOption_And_Value[0]+
							"\nPayment Authorization Token, Expected = XXXXXXXXXXXX1111, Actual = "+PaymentOption_And_Value[1]);
					Assert.fail("Payment Method, Expected = Credit Card, Actual = "+PaymentMethod+", Payment Authorization Token, Expected = XXXXXXXXXXXX1111, Actual = "+PaymentOption_And_Value[1]);
				}

				// ========================================================================== 
				// =================== Verify the Job Parts created =========================== 
				// ========================================================================== 
				System.out.println("Verify Job Parts");

				CommonFunctions.ClickElement(_driver, By.xpath("//a[text() = 'Parts Info']"));
				((JavascriptExecutor) _driver).executeScript("arguments[0].scrollIntoView();", _driver.findElement(By.xpath("//fieldset[contains(@id,'JobPart_N')]")));
				TakeScreenshot.ScreenShotRegion(_driver, By.xpath("//fieldset[contains(@id,'JobPart_N')]"), "JobParts");

				int iNumofJobPartsCreated = CommonFunctions.RowCount(_driver, By.xpath("//table[@id = 'JobPart_N1002F']/tbody/tr"));				
				if (iNumofJobPartsCreated == 2)
				{
					System.out.println("Verify Job Part Details");

					CommonFunctions.ClickElement(_driver, By.xpath("//table[@id = 'JobPart_N1002F']/tbody/tr[2]/td[3]/div/a/img"));
					CommonFunctions.waitForPageLoaded(_driver);
					CommonFunctions.Wait(_driver, By.name("additionalDescription"));
					
					String sPartDescription = CommonFunctions.GetValue(_driver, By.name("description_label"));
					dbConnection.UpdateFunction(sSheetName, sScenario, sTestcase, "JobPart1_Description", sPartDescription);

					//verify Part Details
					CommonFunctions.ClickElement(_driver, By.xpath("//a[text() = 'Part Details']"));
					((JavascriptExecutor) _driver).executeScript("arguments[0].scrollIntoView();", _driver.findElement(By.xpath("//div[@class = 'active']/fieldset[1]")));
					TakeScreenshot.ScreenShotRegion(_driver, By.xpath("//div[@class = 'active']/fieldset[1]"), "PartDetails");

					//verify content
					((JavascriptExecutor) _driver).executeScript("arguments[0].scrollIntoView();", _driver.findElement(By.xpath("//fieldset[contains(@id, 'JobPartContent')]")));
					TakeScreenshot.ScreenShotRegion(_driver, By.xpath("//fieldset[contains(@id, 'JobPartContent')]"), "JobPartContent");

					//verify print runs
					((JavascriptExecutor) _driver).executeScript("arguments[0].scrollIntoView();", _driver.findElement(By.xpath("//div[@class = 'active']/fieldset[4]")));
					TakeScreenshot.ScreenShotRegion(_driver, By.xpath("//div[@class = 'active']/fieldset[4]"), "PrintRuns");

					//verify Finish
					((JavascriptExecutor) _driver).executeScript("arguments[0].scrollIntoView();", _driver.findElement(By.xpath("//div[@class = 'active']/fieldset[5]")));
					TakeScreenshot.ScreenShotRegion(_driver, By.xpath("//div[@class = 'active']/fieldset[5]"), "FinishDetails");

					//verify Material details
					((JavascriptExecutor) _driver).executeScript("arguments[0].scrollIntoView();", _driver.findElement(By.xpath("//fieldset[contains(@id, 'JobMaterial')]")));
					TakeScreenshot.ScreenShotRegion(_driver, By.xpath("//fieldset[contains(@id, 'JobMaterial')]"), "JobMaterialDetails");

					//verify General Details
					CommonFunctions.ClickElement(_driver, By.xpath("//div[@id = 'tabBar']//span[text() = 'G']"));
					((JavascriptExecutor) _driver).executeScript("arguments[0].scrollIntoView();", _driver.findElement(By.xpath("//div[@class = 'active']")));
					TakeScreenshot.ScreenShotRegion(_driver, By.xpath("//div[@class = 'active']"), "GeneralDetails");

					//verify Plans created
					CommonFunctions.ClickElement(_driver, By.xpath("//div[@id = 'tabBar']//span[text() = 'a']"));
					((JavascriptExecutor) _driver).executeScript("arguments[0].scrollIntoView();", _driver.findElement(By.xpath("//div[@class = 'active']/fieldset[1]")));
					TakeScreenshot.ScreenShotRegion(_driver, By.xpath("//div[@class = 'active']/fieldset[1]"), "Plans");

					//verify Job part items
					CommonFunctions.ClickElement(_driver, By.xpath("//a[text() = 'Job Part Items']"));
					((JavascriptExecutor) _driver).executeScript("arguments[0].scrollIntoView();", _driver.findElement(By.xpath("//fieldset[contains(@id, 'JobPartItem')]")));
					TakeScreenshot.ScreenShotRegion(_driver, By.xpath("//fieldset[contains(@id, 'JobPartItem')]"), "JobPartItems");

					WIP.getJobPartDetails(sSheetName, sScenario, sTestcase, "1");
					verifyPartDetails(sSheetName, sScenario, sTestcase);
				}
				else
				{
					System.err.println("Total Job Parts created are incorrect, Expected = 1, Actual = "+(iNumofJobPartsCreated-2));
					Assert.fail("Total Job Parts created are incorrect, Expected = 1, Actual = "+(iNumofJobPartsCreated-2));
				}

				// ========================================================================== 
				// =================== Verify the Job Plans created =========================== 
				// ========================================================================== 
				System.out.println("Navigate to Job Plan Production page");
				WIP.navigateToProductionPlanPage(sJobNumber, PaceServer, PaceCompany);

				System.out.println("Verify Job Plans");
				int iJobPlanCnt = CommonFunctions.RowCount(_driver, By.xpath("//table[@id = 'JobPlan']/tbody/tr"));
				if(iJobPlanCnt ==  5)
				{
					((JavascriptExecutor) _driver).executeScript("arguments[0].scrollIntoView();", _driver.findElement(By.xpath("//table[@id = 'JobPlan']/tbody/tr[1]")));
					TakeScreenshot.ScreenShotRegion(_driver, By.xpath("//table[@id = 'JobPlan']"), "ProductionPlans");

					String sJobPlanIDs = JP.getJobPlans();
					dbConnection.UpdateFunction(sSheetName, sScenario, sTestcase, "JobPlanIDs", sJobPlanIDs);
				}
				else
				{
					System.err.println("Total Job Plans created are incorrect, Expected = 2, Actual = "+iJobPlanCnt);
					Assert.fail("Total Job Plans created are incorrect, Expected = 2, Actual = "+iJobPlanCnt);
				}

				// ========================================================================== 
				// =================== Verify the Job shipment created ======================== 
				// ========================================================================== 
				System.out.println("Navigate to Job Shipment Detail page");
				WIP.navigateToJobShipmentListpage(sJobNumber, PaceServer, PaceCompany);

				System.out.println("Verify Job Shipment details");
				if (CommonFunctions.RowCount(_driver, By.xpath("//div[contains(@id, 'shipmentBox')]")) ==  1)
				{
					CommonFunctions.ClickElement(_driver, By.xpath("//div[@id = 'shipmentBox0']/div[1]/span/div[1]//img[@title = 'View Object']"));
					CommonFunctions.waitForPageLoaded(_driver);
					CommonFunctions.Wait(_driver, By.xpath(Locators.getProperty(Locators.Delete)));

					CommonFunctions.ClickElement(_driver, By.xpath("//a[text() = 'General Shipment']"));
					TakeScreenshot.ScreenShotRegion(_driver, By.xpath("//div[@class = 'active']"), "JobShipmentDetails");

					CommonFunctions.ClickElement(_driver, By.xpath("//a[text() = 'Shipment Address']"));
					TakeScreenshot.ScreenShotRegion(_driver, By.xpath("//div[@class = 'active']"), "JobShipmentContactDetails");

					String sJobShipmentID = CommonFunctions.getIDfromURL(_driver);
					dbConnection.UpdateFunction(sSheetName, sScenario, sTestcase, "JobShipmentID", sJobShipmentID);
				}
				else
				{
					System.err.println("No Job shipment was created");
					Assert.fail("No Job shipment was created");
				}

				DC.Logout();
				//eyes.close();
			}
			catch (Exception e)
			{
				e.printStackTrace();
				TakeScreenshot.ScreenShotWindow(_driver, sTestcase);
				Assert.fail(sTestcase+" failed");
			}
		}
	}

	public void verifyPartDetails(String Sheet, String Scenario, String Testcase) throws Exception
	{
		boolean bSizeDeatils = false, bPrintDetails = false, bFinishDetails = false, bJobMatDetails = false, bOtherDetails = false; 

		String sFinishSize = dbConnection.ReadFunction(Sheet, Scenario, Testcase, "JobPart1FinalSize");
		String sFlatSize = dbConnection.ReadFunction(Sheet, Scenario, Testcase, "JobPart1FlatSize");
		String sPages = dbConnection.ReadFunction(Sheet, Scenario, Testcase, "JobPart1Pages");
		String sFoldPattern = dbConnection.ReadFunction(Sheet, Scenario, Testcase, "JobPart1FoldPattern");
		String sContentFile = dbConnection.ReadFunction(Sheet, Scenario, Testcase, "JobPart1ContentFiles");
		String sNumUps = dbConnection.ReadFunction(Sheet, Scenario, Testcase, "JobPart1NumUps");
		String sNumAlong = dbConnection.ReadFunction(Sheet, Scenario, Testcase, "JobPart1NumAlong");
		String sNumAcross = dbConnection.ReadFunction(Sheet, Scenario, Testcase, "JobPart1NumAcross");
		String sPrinter = dbConnection.ReadFunction(Sheet, Scenario, Testcase, "JobPart1Printer");
		String sOrientation = dbConnection.ReadFunction(Sheet, Scenario, Testcase, "JobPart1Orientation");
		String sPrintJobMat = dbConnection.ReadFunction(Sheet, Scenario, Testcase, "JobPart1JobMaterial");
		String sPrintJobMatDesc = dbConnection.ReadFunction(Sheet, Scenario, Testcase, "JobPart1Description");
		String sPageRange = dbConnection.ReadFunction(Sheet, Scenario, Testcase, "JobPart1PageRange");
		String sPageCount = dbConnection.ReadFunction(Sheet, Scenario, Testcase, "JobPart1PageCount");
		String sS1 = dbConnection.ReadFunction(Sheet, Scenario, Testcase, "JobPart1S1");
		String sS2 = dbConnection.ReadFunction(Sheet, Scenario, Testcase, "JobPart1S2");
		String sFinishingType = dbConnection.ReadFunction(Sheet, Scenario, Testcase, "JobPart1FinishingType");
		String sFinishingOperation = dbConnection.ReadFunction(Sheet, Scenario, Testcase, "JobPart1FinishingOperation");
		String sJobmaterials = dbConnection.ReadFunction(Sheet, Scenario, Testcase, "JobPart1NumMaterials");

		CommonFunctions.ClickElement(_driver, By.xpath("//a[text()='Part Details']"));
		String sJobMat = CommonFunctions.getText(_driver, By.xpath("//table[@id='JobMaterial_N1018D']/tbody/tr[6]/td[4]/div"));
		String sJobMatDesc = CommonFunctions.getText(_driver, By.xpath("//table[@id='JobMaterial_N1018D']/tbody/tr[6]/td[5]/div"));
		String sJobMatBS = CommonFunctions.getText(_driver, By.xpath("//table[@id='JobMaterial_N1018D']/tbody/tr[6]/td[6]/div"));
		String sJobMatRS = CommonFunctions.getText(_driver, By.xpath("//table[@id='JobMaterial_N1018D']/tbody/tr[6]/td[7]/div/span[1]")) + " x " + CommonFunctions.getText(_driver, By.xpath("//table[@id='JobMaterial_N1018D']/tbody/tr[6]/td[7]/div/span[3]"));
		String sJobMatPQ = CommonFunctions.getText(_driver, By.xpath("//table[@id='JobMaterial_N1018D']/tbody/tr[6]/td[8]/div"));

		dbConnection.UpdateFunction(Sheet, Scenario, Testcase, "JobPart1JobMat", sJobMat);
		dbConnection.UpdateFunction(Sheet, Scenario, Testcase, "JobPart1JobMatDesc", sJobMatDesc);
		dbConnection.UpdateFunction(Sheet, Scenario, Testcase, "JobPart1JobMatBuySize", sJobMatBS);
		dbConnection.UpdateFunction(Sheet, Scenario, Testcase, "JobPart1JobMatRunSize", sJobMatRS);
		dbConnection.UpdateFunction(Sheet, Scenario, Testcase, "JobPart1JobMatPlanQty", sJobMatPQ);

		String sItemTem = dbConnection.ReadFunction(Sheet, Scenario, Testcase, "JobPart1ItemTemplate");
		String sJobPartItems = dbConnection.ReadFunction(Sheet, Scenario, Testcase, "JobPart1JobPartItems");

		if (sFinishSize.equals("8 1/2 x 11") && sFlatSize.equals("17 1/4 x 11 1/4")  && sPages.equals("4")  && sFoldPattern.equals("4/7 - 4 Page then Halfold")  && sContentFile.equals("Brochure4pg.pdf"))
		{
			bSizeDeatils = true;
		}
		else
		{
			System.err.println("Finish Size, Expected = 8 1/2 x 11, Actual = " + sFinishSize +
					"\nFlat Size, Expected = 17 1/4 x 11 1/4, Actual = " + sFlatSize +
					"\nPages, Expected = 4, Actual = " + sPages +
					"\nFold Pattern, Expected = 4/7 - 4 Page then Halfold, Actual = " + sFoldPattern +
					"\nContent File, Expected = Brochure4pg.pdf, Actual = " + sContentFile );
		}

		if (sNumUps.equals("2") && sNumAlong.equals("1") && sNumAcross.equals("2") && sPrinter.equals("KOM285 - Komori 28 5C")  && sOrientation.equals("Portrait")  && sPrintJobMat.equals("CG-80.0-Gloss Cover")  && sPrintJobMatDesc.equals("4 Page Brochure")  && sPageRange.equals("1-4")  && sPageCount.equals("4")  && sS1.equals("4")  && sS2.equals("4"))
		{
			bPrintDetails = true;
		}
		else
		{
			System.err.println("Num Ups, Expected = 2, Actual = " + sNumUps +
					"\nNum Along, Expected = 1, Actual = " + sNumAlong +
					"\nNum Across, Expected = 2, Actual = " + sNumAcross +								
					"\nPrint, Expected = KOM285 - Komori 28 5C, Actual = " + sPrinter +
					"\nOrientation, Expected = Portrait, Actual = " + sOrientation +
					"\nJob Material, Expected = CG-80.0-Gloss Cover, Actual = " + sPrintJobMat +
					"\nDescription, Expected = 4 Page Brochure, Actual = " + sPrintJobMatDesc +
					"\nPage range, Expected = 1-4, Actual = " + sPageRange +
					"\nPage Count, Expected = 4, Actual = " + sPageCount +
					"\nS1, Expected = 4, Actual = " + sS1 +
					"\nS2, Expected = 4, Actual = " + sS2 );
		}

		if (sFinishingType.equals("Offline") && sFinishingOperation.equals("Fold - Folding"))
		{
			bFinishDetails = true;
		}
		else
		{
			System.err.println("Finish Type, Expected = Offline, Actual = " + sFinishingType +
					"\nFinishing Operation, Expected = Fold - Folding, Actual = " + sFinishingOperation );
		}

		if (sJobmaterials.equals("6") && sJobMat.equals("CG-80.0") && sJobMatDesc.equals("Gloss Cover")  && sJobMatBS.equals("28 x 40")  && sJobMatRS.equals("28 x 20")  && sJobMatPQ.equals("307"))
		{
			bJobMatDetails = true;
		}
		else
		{
			System.err.println("Job Materials, Expected = 6, Actual = " + sJobmaterials +
					"\nJob Material, Expected = CG-80.0, Actual = " + sJobMat +
					"\nJob Material Description, Expected = Gloss Cover, Actual = " + sJobMatDesc +
					"\nBuy Size, Expected = 28 x 40, Actual = " + sJobMatBS +
					"\nRun Size, Expected = 28 x 20, Actual = " + sJobMatRS +
					"\nPlanned Quantity, Expected = 307, Actual = " + sJobMatPQ );
		}

		if (sItemTem.equals("fgs4pagebro - 4 Page Brochure") && sJobPartItems.equals("2"))
		{
			bOtherDetails = true;
		}
		else
		{
			System.err.println("Item Template, Expected = fgs4pagebro - 4 Page Brochure, Actual = " + sItemTem +
					"\nJob Part Items, Expected = 2, Actual = " + sJobPartItems );
		}

		if (bSizeDeatils && bPrintDetails && bFinishDetails && bJobMatDetails && bOtherDetails)
		{
			System.out.println("Job parts details are verified");
		}
		else
		{
			System.err.println("Job part details are not matching");
			Assert.fail("Job part details are not matching. Please see logs");
		}
	}

}
