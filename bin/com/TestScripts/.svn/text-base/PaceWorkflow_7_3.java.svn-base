package com.TestScripts;

import static org.junit.Assert.assertTrue;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.TimeUnit;

import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.interactions.Actions;

import com.TestScripts.RetryTest.Retry;
import com.gui_auto.base_classes.GUI_automation_base;
import com.gui_auto.base_classes.GUI_automation_properties;
import com.gui_auto.dao.ReadAndUpdate;
import com.gui_auto.pages.DCPage;
import com.gui_auto.pages.EstimationPage;
import com.gui_auto.pages.JCCPage;
import com.gui_auto.pages.JobBillingPage;
import com.gui_auto.pages.JobCostingPage;
import com.gui_auto.pages.JobPlanningPage;
import com.gui_auto.pages.RegisterPage;
import com.gui_auto.pages.WorkflowIntegrationPage;
import com.gui_auto.utilities.CommonFunctions;
import com.gui_auto.utilities.Locators;
import com.gui_auto.utilities.ScreenShot;

public class PaceWorkflow_7_3 extends GUI_automation_base{

	ReadAndUpdate dbConnection = new ReadAndUpdate();
	ScreenShot TakeScreenshot = new ScreenShot();
	String browser= _properties.getProperty(GUI_automation_properties.BASEURL);
	String sFile = _properties.getProperty(GUI_automation_properties.ScreenShotPath);
	//public static Eyes eyes;

	long maxWait=10000;
	File directory = new File(sFile);

	private RegisterPage _register;
	RetryTest Retry = new RetryTest();

	@Rule
	public Retry retry = Retry.new Retry(1);

	@Before
	public void setUp() throws Exception
	{		
		//eyes = new Eyes();
		//eyes.setApiKey("U4H2HXkiij105f7H1jedc103H9d2tRA8Hdua6DepWhuic110");
		//eyes.setForceFullPageScreenshot(true);
	}

	public String dateReturn()
	{	
		Date date = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy-HH:mm");
		return sdf.format(date);
	}

	@After
	public void tearDown() throws Exception 
	{
		_driver.quit();
	}

	@Test
	public void TC_12_3 () throws Exception
	{
		//=======================================================================
		//Constant ones....
		//=======================================================================

		String sSheetName="IntegrationWF";
		String  sScenario = "WorkFlow";
		String  sTestcase = "TC_17";
		String dater = dateReturn();
		dbConnection.UpdateFunction(sSheetName,sScenario,sTestcase,"Executed_On",dater);
		//========================================================================
		String Exec_Required= dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "Execution_Required");
		dbConnection.UpdateFunction("PresentWorkflow", "PresentWorkflow", "PresentWorkflow", "TestCase_Executing", "TC_17");


		String PaceURL=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "PACEURL");
		String PaceUserN=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "PACEUserName");
		String PacePass=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "PACEPassword");
		String PaceCompany=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "PACECompany");
		String PaceServer=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "PACEServer");
		String sJobNumber=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "PACE_Job_Num");
		WorkflowIntegrationPage WIP = new WorkflowIntegrationPage(_driver);
		
		DCPage DC = new DCPage(_driver);
		EstimationPage EP = new EstimationPage(_driver);
		JobPlanningPage JP = new JobPlanningPage(_driver);
		JCCPage JCC = new JCCPage(_driver);
		Actions action = new Actions(_driver);
		JobCostingPage JC = new JobCostingPage(_driver);
		JobBillingPage JB = new JobBillingPage(_driver);

		//==========================================================================
		//===================Complete Job shipment========================
		//==========================================================================
		String sJobShipmentID = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "JobShipmentID");
		
		System.out.println("Navigate to Job Shipment Detail page");
		WIP.navigateToJobShipmentDetailpage(sJobShipmentID, PaceServer, PaceCompany);
		
		System.out.println("Ship the Job in PACE");
		CommonFunctions.selectDropdownByText(_driver, By.xpath(Locators.getProperty(Locators.Job_Shipment_ShipmentType)), "Final Shipment");
		if (!CommonFunctions.Elementdisplayed_Enabled(_driver.findElement(By.name("cost"))))
		{
			CommonFunctions.ClickElement(_driver, By.xpath("//fieldset[@id='shipmentDetails']/legend/span"));
		}	    	
		CommonFunctions.SendValue(_driver, By.name("cost"), "20");
		CommonFunctions.SendValue(_driver, By.name("weight"), "10");
		CommonFunctions.SendValue(_driver, By.name("trackingNumber"), "1234567890");
		DC.Update();
	
		String sJobStatus = CommonFunctions.getText(_driver, By.xpath("//label[text()='Admin Status']/../../div/div[1]/a"));
		if (sJobStatus.equals("Shipped"))
		{
			System.out.println("Job status was changed to Shipped");
		}
		else
		{
			System.err.println("Job status was NOT changed to Shipped");
			Assert.fail("Job status was NOT changed to Shipped");
		}
		
		//==========================================================================
		//===================verify the Job costs created for the shipment completion===========================
		//==========================================================================
		System.out.println("Navigate to Job Part Job Costs page and verify the Job Cost created");
		WIP.JobPartJobCostPage(sJobNumber, "01", PaceServer, PaceCompany);
		CommonFunctions.waitForPageLoaded(_driver);
		CommonFunctions.ClickElement(_driver, By.xpath("//a[text()='Unposted Job Costs']"));
		int iRwCnt = _driver.findElements(By.xpath("//table[@id='JobCost_N10022']/tbody/tr")).size();			
		if (iRwCnt == 8)
		{
			String sTranactionType = "", sJobCost = "";
			for (int i = 1; i<=iRwCnt; i++)
			{
				String sNotes = CommonFunctions.getText(_driver, By.xpath("//table[@id='JobCost_N10022']/tbody/tr[1]/td[7]/div"));
				if (sNotes.equals(sJobNumber))
				{
					CommonFunctions.SetOriginalWindowHandle(_driver);
					CommonFunctions.ClickElement(_driver, By.xpath("//table[@id='JobCost_N10022']/tbody/tr[1]/td[2]/div/a/img"));
					Thread.sleep(2000);
					CommonFunctions.SwitchToWindow(_driver, "Job Cost");
					sTranactionType = CommonFunctions.GetSelectedOption(_driver, By.name(Locators.getProperty(Locators.Job_Cost_TransactionType)));
					sJobCost = CommonFunctions.GetValue(_driver, By.name("cost"));
					CommonFunctions.CloseWindow(_driver, "Job Cost");
					CommonFunctions.ReturnToOriginalWindow(_driver);
				}
			}
			
			if (sTranactionType.equals("Job Shipment") && sJobCost.contains("20"))
			{
				System.out.println("Job cost with correct transaction type and cost was created");
			}
			else
			{
				TakeScreenshot.ScreenShotWindow(_driver, sTestcase);
				Assert.fail("Job cost with incorrect transaction type was created, Expected = Job Shipment, Actual = "+sTranactionType);
			}
		}
		else
		{
			System.err.println("Incorrect number of Job Costs were created, expected = 8, Actual = "+iRwCnt);
		}
		
		//==========================================================================
		//===================verify Job Status in PACE========================
		//==========================================================================
		_register.launchapplication(PaceURL);
		_driver.manage().window().maximize();
		_driver.manage().timeouts().implicitlyWait(20,TimeUnit.SECONDS);

		System.out.println("Log on to Pace");
		DC.EpaceLogin(PaceUserN, PacePass, PaceCompany);

		System.out.println("Navigate to Job Detail Page");
		WIP.NavigateToJob(sJobNumber, PaceServer, PaceCompany);
		assertTrue("Job Status was not changed to Shipped", CommonFunctions.GetSelectedOption(_driver, By.name(Locators.getProperty(Locators.Job_Status))).equals("Shipped"));
		CommonFunctions.ClickElement(_driver, By.xpath("//a[text()='Billing Info']"));
		String sJobValue = CommonFunctions.getText(_driver, By.xpath("//label[text()='Job Value']/../following-sibling::div/div"));
		dbConnection.UpdateFunction(sSheetName, sScenario, sTestcase, "JobValue", sJobValue);

		//==========================================================================
		//===================Approve Job costs and post them========================
		//==========================================================================
		WIP.navigateToApproveJobCostsPage(PaceServer, PaceCompany);
		JC.ApproveJobCostTransaction(sJobNumber);
		WIP.navigateToPostJobCostsPage(PaceServer, PaceCompany);
		JC.PostJobCostTransaction("All Types", "t", "", "", false, "", "", "");
		CommonFunctions.waitForPageLoaded(_driver);

		System.out.println("Go to each Job Part and verify the Job Costs are posted");
		WIP.JobPartJobCostPage(sJobNumber, "01", PaceServer, PaceCompany);
		CommonFunctions.waitForPageLoaded(_driver);
		CommonFunctions.ClickElement(_driver, By.xpath("//a[text()='Unposted Job Costs']"));
		iRwCnt = _driver.findElements(By.xpath("//table[@id='JobCost_N10022']/tbody/tr")).size();			
		if (iRwCnt > 0)
		{
			System.err.println("All the Job costs are not posted for Job Part 1");
			TakeScreenshot.ScreenShotWindow(_driver, sTestcase);
			Assert.fail("All the Job costs are not posted for Job Part 1");
		}

		//==========================================================================
		//===================Add an invoice to the Job and Process and Post the invoice========================
		//==========================================================================

		System.out.println("Create an Invoice Batch");
		sJobValue = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "JobValue");
		WIP.NavigateToEnterNewBatch(PaceServer, PaceCompany);
		DC.Add();
		String sInvoiceBatchID = CommonFunctions.GetIdFromUrl(_driver);

		System.out.println("Add an invoice to the Invoice Batch created above");
		WIP.NavigateToEnterNewInvoicePage(PaceServer, PaceCompany);
		WIP.AddNewInvoice(sJobNumber, sInvoiceBatchID);
		CommonFunctions.waitForPageLoaded(_driver);
		Thread.sleep(2000);
		String sInvoiceTotal = CommonFunctions.getText(_driver, By.xpath("//fieldset[contains(@id, 'InvoiceLine')]//td[@class='group-1 totals grandTotals']"));
		String sShippingTotal = CommonFunctions.getText(_driver, By.xpath("//fieldset[@id = 'InvoiceExtra_N101B2_fieldset']//td[@class='group-1 totals grandTotals']"));

		if (sInvoiceTotal.contains(sJobValue) && sShippingTotal.contains("20"))
		{
			System.out.println("System created a Invoice correctly");
		}
		else
		{
			System.err.println("Invoice Total, Expected = "+sJobValue+", Actual = "+sInvoiceTotal+
					"\nShipping Total, Expected = $20.00, Actual = "+sShippingTotal);
			TakeScreenshot.ScreenShotWindow(_driver, sTestcase);
			Assert.fail("System did not create Invoice with correct details");
		}
		String sInvoiceAmount = CommonFunctions.getText(_driver, By.xpath("//label[text()='Invoice Amount']/../following-sibling::div/div"));
		dbConnection.UpdateFunction(sSheetName, sScenario, sTestcase, "InvoiceAmount", sInvoiceAmount);

		WIP.ApprovedInvoiceBatch(sInvoiceBatchID, PaceServer, PaceCompany);
		String sInvoiceNum = CommonFunctions.GetValue(_driver, By.xpath("//table[@id='Invoice_N1003A']/tbody/tr/td[4]/input"));
		if(sInvoiceNum.equals("") || sInvoiceNum == null)
		{
			CommonFunctions.SendValue(_driver, By.xpath("//table[@id='Invoice_N1003A']/tbody/tr/td[4]/input"), sJobNumber+"1");
			DC.Update();
		}
		sInvoiceNum = CommonFunctions.GetValue(_driver, By.xpath("//table[@id='Invoice_N1003A']/tbody/tr/td[4]/input"));
		System.out.println("Created new Invoice "+sInvoiceNum);
		dbConnection.UpdateFunction(sSheetName, sScenario, sTestcase, "InvoiceNumber", sInvoiceNum);
		JB.ProcessApprovedBatch();
		_driver.navigate().refresh();
		CommonFunctions.waitForPageLoaded(_driver);
		JB.PostApprovedBatch1();

		System.out.println("Go to Customer details page > on Context, click on Receivable link, Verify the invoice number & amount are shown.");
		if (WIP.VerifyInvoiceDetailsInCustReceivables("BRADY", sInvoiceNum, sInvoiceAmount, PaceServer, PaceCompany))
		{
			System.out.println("The invoice number & amount are shown correctly in customer receivables page");
		}
		else
		{
			TakeScreenshot.ScreenShotWindow(_driver, sTestcase);
			Assert.fail("The invoice number & amount are NOT shown correctly in customer receivables page");
		}

		//==========================================================================
		//===================Receive the Payment (Receive & Process & Post)========================
		//==========================================================================

		System.out.println("Enter the new Batch");
		WIP.NavigateToAddPaymentBatchPage(PaceServer, PaceCompany);
		DC.Add();				
		String sPaymentBatchID = CommonFunctions.getIDfromURL(_driver);
		System.out.println("New payment batch id "+sPaymentBatchID+" is created");

		System.out.println("Enter Payments , on payment select invoice number & Check the Pay Boolean and click update.");
		WIP.AddPayment("HANAKO", sInvoiceNum, sInvoiceAmount);
		CommonFunctions.ClickElement(_driver, By.xpath("//table[@id='PaymentTrnLine_N100D7']/thead/tr/th[13]//a[text()='(all)']"));
		DC.Update();

		if (!WIP.ApproveAndPostPaymentBatch(sPaymentBatchID, PaceServer, PaceCompany))
		{
			TakeScreenshot.ScreenShotWindow(_driver, sTestcase);
			Assert.fail("Payment is not received");
		}

		WIP.gotoCustomerDetailPage("HANAKO", PaceServer, PaceCompany);
		CommonFunctions.ClickElement(_driver, By.xpath("//a[text()='Balance Info']"));
		String sCustCurrentBalance = CommonFunctions.getText(_driver, By.xpath("//label[text()='Current']/../../div/div"));

		WIP.NavigateToCustomerPaymentsPage("FGS", PaceServer, PaceCompany);
		String sPaymentAmount = CommonFunctions.getText(_driver, By.xpath("//table[@id='YTD']/tbody/tr[3]/td[6]/div"));

		if(sCustCurrentBalance.equals("$0.00") && sPaymentAmount.equals(sInvoiceAmount))
		{
			System.out.println("Customer balances are updated correctly and Payments are recorded in customer payments page");
		}
		else
		{
			System.err.println("Customer current balance, Expected = $0.00, Actual = "+sCustCurrentBalance+
					"\nPayment record added in customer payments page = "+sPaymentAmount.equals(sInvoiceAmount));
			TakeScreenshot.ScreenShotWindow(_driver, sTestcase);
			Assert.fail("Customer balances are updated correctly");
		}

		DC.Logout();

	}
}
