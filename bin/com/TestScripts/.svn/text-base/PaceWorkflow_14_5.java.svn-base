package com.TestScripts;

import static org.junit.Assert.assertTrue;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.TimeUnit;

import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.support.PageFactory;

import com.TestScripts.RetryTest.Retry;
import com.gui_auto.base_classes.GUI_automation_base;
import com.gui_auto.base_classes.GUI_automation_properties;
import com.gui_auto.dao.ReadAndUpdate;
import com.gui_auto.pages.DCPage;
import com.gui_auto.pages.DSF_Integration_Page;
import com.gui_auto.pages.JobBillingPage;
import com.gui_auto.pages.JobCostingPage;
import com.gui_auto.pages.JobPlanningPage;
import com.gui_auto.pages.Login;
import com.gui_auto.pages.ProcessShipperPage;
import com.gui_auto.pages.RegisterPage;
import com.gui_auto.pages.Storefront;
import com.gui_auto.pages.WorkflowIntegrationPage;
import com.gui_auto.utilities.CommonFunctions;
import com.gui_auto.utilities.Locators;
import com.gui_auto.utilities.ScreenShot;

public class PaceWorkflow_14_5 extends GUI_automation_base
{
	ReadAndUpdate dbConnection = new ReadAndUpdate();
	ScreenShot TakeScreenshot = new ScreenShot();
	String browser= _properties.getProperty(GUI_automation_properties.BASEURL);
	String sFile = _properties.getProperty(GUI_automation_properties.ScreenShotPath);
	//public static Eyes eyes;
	
	long maxWait=10000;
	File directory = new File(sFile);

	private RegisterPage _register;
	RetryTest Retry = new RetryTest();

	@Rule
	public Retry retry = Retry.new Retry(1);

	@Before
	public void setUp() throws Exception
	{		
		//eyes = new Eyes();
		//eyes.setApiKey("U4H2HXkiij105f7H1jedc103H9d2tRA8Hdua6DepWhuic110");
		//eyes.setForceFullPageScreenshot(true);
	}

	public String dateReturn()
	{	
		Date date = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy-HH:mm");	
		return sdf.format(date);
	}
	
	public static void Killpython() throws Exception   
	{
		Process p = Runtime.getRuntime().exec("cmd /c taskkill /F /IM python.exe *32 /T");
		p.destroy();
	}
	
	//@After
	public void tearDown() throws Exception
	{
		_driver.quit();
	}
	
	@Test
	public void TC_14_5() throws Exception
	{
		//=======================================================================
		//Constant ones....
		//=======================================================================
		
		String sSheetName="IntegrationWF";
		String  sScenario = "WorkFlow";
		String dater = dateReturn();
		String sTestcase = "TC_14";
		dbConnection.UpdateFunction(sSheetName,sScenario,sTestcase,"Executed_On",dater);
		WorkflowIntegrationPage WIP = new WorkflowIntegrationPage(_driver);
		//========================================================================
		
		String Exec_Required= dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "Execution_Required");
		
		
		String PaceURL=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "PACEURL");
		String PaceUserN=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "PACEUserName");
		String PacePass=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "PACEPassword");
		String PaceCompany=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "PACECompany");
		String PaceServer=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "PACEServer");
		
		String sJobNumber= dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "PACE_Job_Num");
		
		super.setUp(getBrowser());
		_register = PageFactory.initElements(_driver, RegisterPage.class);
		_register.launchapplication(PaceURL);
		_driver.manage().window().maximize();
		_driver.manage().timeouts().implicitlyWait(20,TimeUnit.SECONDS);
		//_driver = eyes.open(_driver, "PACE", "TC_12_3", new RectangleSize(1008, 705));
		
		DCPage DC = new DCPage(_driver);
		JobPlanningPage JP = new JobPlanningPage(_driver);
		

		String sJPPFPlanIDs = "", sJPPFPlanID = "";
		
		try
		{
		
		System.out.println("Loging in to Pace");
		DC.EpaceLogin(PaceUserN, PacePass, PaceCompany);
		
		//==========================================================================
		//===================Verify the Job Plans are updated with start and end dates===========================
		//==========================================================================				
		System.out.println("Navigate to Job Plan Production page");
		WIP.navigateToProductionPlanPage(sJobNumber, PaceServer, PaceCompany);
		
		System.out.println("Verify Job Plans are updated with start and end times");				
		String sJobPlans = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "JobPlanIDs");
		String[] aJobPlans = sJobPlans.split(";");
		String sStartDates = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "StartDates");
		String[] aStartDates = sStartDates.split(";");
		String sEndDates = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "EndDates");
		String[] aEndDates = sEndDates.split(";");
		
		String sOriginalWindow = _driver.getWindowHandle();
		int iJobPlanCnt = CommonFunctions.RowCount(_driver, By.xpath("//table[@id='JobPlan']/tbody/tr"));
		for (int i=1; i<=iJobPlanCnt; i++)
		{
			CommonFunctions.ClickElement(_driver, By.xpath("//table[@id='JobPlan']/tbody/tr["+i+"]/td[2]/div/a/img"));
			Thread.sleep(3000);
			CommonFunctions.SwitchToWindow(_driver, "Job Plan");
			String sStartDate = CommonFunctions.GetValue(_driver, By.name("startDate"))+" "+CommonFunctions.GetValue(_driver, By.name("startTime"));
			String sStartDateExpected = CommonFunctions.changeFormat(aStartDates[i-1], "MM/dd/yy hh:mm:ss a", "MM/dd/yyyy h:mm a").trim();
			String sEndDate = CommonFunctions.GetValue(_driver, By.name("endDate"))+" "+CommonFunctions.GetValue(_driver, By.name("endTime"));
			String sEndDateExpected = CommonFunctions.changeFormat(aEndDates[i-1], "MM/dd/yy hh:mm:ss a", "MM/dd/yyyy h:mm a").trim();
			
			if (sStartDate.equals(sStartDateExpected) && sEndDate.equals(sEndDateExpected))
			{
				System.out.println("Job Plan "+aJobPlans[i-1]+" is updated with correct start and end scheudled time");
			}
			else
			{
				System.err.println("Job Plan "+aJobPlans[i-1]+"" +
									"\nStart Details, Expected = "+sStartDateExpected+", Actual = "+sStartDate+
									"\nEnd Details, Expected = "+sEndDateExpected+", Actual = "+sEndDate);
				Assert.fail("Job Plan "+aJobPlans[i-1]+" is not updated with correct start and end scheudled time");
			}
			_driver.close();
			Thread.sleep(1000);
			CommonFunctions.getPopupMessage(_driver);
			_driver.switchTo().window(sOriginalWindow);
		}
		
		System.out.println("Get JPPF job plan IDs");
		int iJPPFCol = JP.getColumnNum("Job Part Press Form", "//table[@id='JobPlan']");
		int iIDCol = JP.getColumnNum("ID", "//table[@id='JobPlan']");
		for (int i=1; i<=iJobPlanCnt; i++)
		{
			if (CommonFunctions.isElementPresent(_driver, By.xpath("//table[@id='JobPlan']/tbody/tr["+i+"]/td["+iJPPFCol+"]/div/a")))
			{
				if (sJPPFPlanIDs.equals(""))
				{
					sJPPFPlanIDs = CommonFunctions.getText(_driver, By.xpath("//table[@id='JobPlan']/tbody/tr["+i+"]/td["+iIDCol+"]/div"));
				}
				else
				{
					sJPPFPlanIDs = sJPPFPlanIDs+";"+CommonFunctions.getText(_driver, By.xpath("//table[@id='JobPlan']/tbody/tr["+i+"]/td["+iIDCol+"]/div"));
				}
			}
		}
		dbConnection.UpdateFunction(sSheetName, sScenario, sTestcase, "JPPFJobPlansIDs", sJPPFPlanIDs);
		
		//==========================================================================
		//===================Send Job to Fiery===========================
		//==========================================================================
						
		String sJobPartDesc = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "JobPart1_Description");
		String sPythonScirptPath = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "PythonScriptPath");
		String JobNameFiery="02-1: "+sJobPartDesc;
		
		System.out.println("===============Calling Python Caller to run the script for CWS======================");
    	WIP.CallPythonScript(JobNameFiery, sPythonScirptPath);
    	Thread.sleep(5000);
    	Killpython();
    	
    	System.out.println("Verify the Job data displayed in Fiery");
    	String sNumofCopiesInfiery = dbConnection.ReadCellValue("FieryData", "Fields", "NumOfCopies", sTestcase);
    	
    	if(sNumofCopiesInfiery.equals("10"))
    	{
    		System.out.println("All the Job data in Fiery was displayed correctly");
    	}
    	else
    	{
    		System.err.println("Job Quantiy, Expected = 10, Actual = "+sNumofCopiesInfiery );
    		Assert.fail("Job details displayed in Fiery were incorrect");
    	}
    	
    	
    	
    	//==========================================================================
		//===================Verify the Job Plans are updated===========================
		//==========================================================================
    	
    	sJPPFPlanIDs = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "JPPFJobPlansIDs");
    	String[] aJPPFPlanIDs = sJPPFPlanIDs.split(";");
    	sJPPFPlanID = aJPPFPlanIDs[0];
    	JP.navigateToProductionPlanPage(sJobNumber);
    	CommonFunctions.waitForPageLoaded(_driver);
    	int iRwNum = JP.SearchTable4Value("ID", "//table[@id='JobPlan']", sJPPFPlanID);
    	String sJobPlanStatus = CommonFunctions.GetSelectedOption(_driver, By.xpath("//table[@id='JobPlan']/tbody/tr["+iRwNum+"]//select[@name='JobPlan.status']"));
//    	assertTrue("Job status, Expected = Run / Working On or Makeready, Actual = "+sJobPlanStatus, (sJobPlanStatus.equals("Run / Working On") || sJobPlanStatus.equals("Makeready")));
    	
    	System.out.println("Wait for Job to be printed in Fiery");
    	int i = 5;
    	while (!sJobPlanStatus.equals("Process Complete") && i < 10)
    	{
    		Thread.sleep(5000);
    		System.out.println("Wait time = "+i*5+" seconds");
    		_driver.navigate().refresh();
    		CommonFunctions.waitForPageLoaded(_driver);
    		sJobPlanStatus = CommonFunctions.GetSelectedOption(_driver, By.xpath("//table[@id='JobPlan']/tbody/tr["+iRwNum+"]//select[@name='JobPlan.status']"));
    		i = i++;
    	}
	    
		_driver.navigate().refresh();
    	CommonFunctions.waitForPageLoaded(_driver);
    	sJobPlanStatus = CommonFunctions.GetSelectedOption(_driver, By.xpath("//table[@id='JobPlan']/tbody/tr[1]//select[@name='JobPlan.status']"));
    	assertTrue("Job status, Expected = Process Complete, Actual = "+sJobPlanStatus, sJobPlanStatus.equals("Process Complete"));
		
    	//==========================================================================
		//===================Validating Cost from Fiery========
		//==========================================================================
    	
    	_register.launchapplication(PaceURL);
		_driver.manage().window().maximize();
		_driver.manage().timeouts().implicitlyWait(20,TimeUnit.SECONDS);
		
		System.out.println("Log on to Pace");
		DC.EpaceLogin(PaceUserN, PacePass, PaceCompany);
		System.out.println("Navigate to Job Detail Page");
    	JobCostingPage JC = new JobCostingPage(_driver);
		
		System.out.println("Go to Job Part and verify the Job Costs are Created from Fiery");
		
			WIP.JobPartJobCostPage(sJobNumber, "01", PaceServer, PaceCompany);
			CommonFunctions.waitForPageLoaded(_driver);
			CommonFunctions.ClickElement(_driver, By.xpath("//a[text()='Unposted Job Costs']"));
			int iRwCnt = _driver.findElements(By.xpath("//table[@id='JobCost_N10022']/tbody/tr")).size();			
			if (iRwCnt <= 0)
			{
				System.err.println("Job Cost from Fiery is not Created in Pace");
				TakeScreenshot.ScreenShotWindow(_driver, sTestcase);
				Assert.fail("Job Cost from Fiery is not Created in Pace");
			}
			
			String TotalCost=_driver.findElement(By.xpath("//*[@id='JobCost_N10022']/tfoot/tr/td[13]")).getText();
			String tcost[]=TotalCost.split("$");
			double TotalCostValue=Double.parseDouble(tcost[1]);
			double d2 = 0.00;
			int com=Double.compare(TotalCostValue, d2);
			
			if (com >0)
			{
				System.out.println("Cost is created for Fiery Planned Activity with Total as :"+TotalCostValue);
				
			}
			else
			{				
				System.err.println("Cost is not created for Fiery Planned Activity with Total as :"+TotalCostValue);
				Assert.fail("Failed to create cost in pace for Printing activity");
			}
			
			DC.Logout();
		
			//=========================================end of job cost validation for fiery=================
				
			}
			catch (Exception e)
			{
				e.printStackTrace();
				TakeScreenshot.ScreenShotWindow(_driver, sTestcase);
				Assert.fail(sTestcase+" failed");
			}
		}
	}


