package com.TestScripts;

import java.io.File;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;
import java.util.concurrent.TimeUnit;

import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.support.PageFactory;

import com.TestScripts.RetryTest.Retry;
//import com.applitools.eyes.Eyes;
//import com.applitools.eyes.RectangleSize;
import com.gui_auto.base_classes.GUI_automation_base;
import com.gui_auto.base_classes.GUI_automation_properties;
import com.gui_auto.dao.ReadAndUpdate;
import com.gui_auto.pages.DCPage;
import com.gui_auto.pages.DSF_Integration_Page;
import com.gui_auto.pages.JobPlanningPage;
import com.gui_auto.pages.Login;
import com.gui_auto.pages.RegisterPage;
import com.gui_auto.pages.Storefront;
import com.gui_auto.pages.WorkflowIntegrationPage;
import com.gui_auto.utilities.CommonFunctions;
import com.gui_auto.utilities.Locators;
import com.gui_auto.utilities.ScreenShot;

public class PaceWorkflow_15b_1 extends GUI_automation_base
{
	ReadAndUpdate dbConnection = new ReadAndUpdate();
	ScreenShot TakeScreenshot = new ScreenShot();
	String browser= _properties.getProperty(GUI_automation_properties.BASEURL);
	String sFile = _properties.getProperty(GUI_automation_properties.ScreenShotPath);
	//public static Eyes eyes;
	
	long maxWait=10000;
	File directory = new File(sFile);

	private RegisterPage _register;
	RetryTest Retry = new RetryTest();

	@Rule
	public Retry retry = Retry.new Retry(1);

	@Before
	public void setUp() throws Exception
	{		
		//eyes = new Eyes();
		//eyes.setApiKey("U4H2HXkiij105f7H1jedc103H9d2tRA8Hdua6DepWhuic110");
		//eyes.setForceFullPageScreenshot(true);
	}

	public String dateReturn()
	{	
		Date date = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy-HH:mm");
		return sdf.format(date);
	}
	
	public static int randInt(int min, int max) 
	{

		// Usually this can be a field rather than a method variable
		Random rand = new Random();

		// nextInt is normally exclusive of the top value,
		// so add 1 to make it inclusive
		int randomNum = rand.nextInt((max - min) + 1) + min;

		return randomNum;
	}

	@After
	public void tearDown() throws Exception 
	{		   
		_driver.quit();
	}
	
	@Test
	public void TC_15b_1 () throws Exception
	{
		long startTime = System.nanoTime();
		
		//=======================================================================
		//Constant ones....
		//=======================================================================
		
		String sSheetName="IntegrationWF";
		String  sScenario = "WorkFlow";
		String  sTestcase = "TC_15b";
		String dater = dateReturn();
		dbConnection.UpdateFunction(sSheetName,sScenario,sTestcase,"Executed_On",dater);
		//========================================================================
		String Exec_Required= dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "Execution_Required");
		dbConnection.UpdateFunction("PresentWorkflow", "PresentWorkflow", "PresentWorkflow", "TestCase_Executing", "TC_11");
		
		if (Exec_Required.equalsIgnoreCase("Yes"))
		{
			try
			{
				//========================================= prerequisites============================================
				String PaceURL=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "PACEURL");
				String PaceUserN=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "PACEUserName");
				String PacePass=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "PACEPassword");
				String PaceCompany=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "PACECompany");
				String PaceServer=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "PACEServer");
				
				String ProductName=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "ProductName");
				String SiteUrl=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "SiteUrl");
				String userName=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "USERNAME");
				String passWord=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "PASSWORD");
				String CommChannel=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "Communication_Channel");
				
				super.setUp(getBrowser());
				_register = PageFactory.initElements(_driver, RegisterPage.class);				
				
				//============================= PACE prerequisites========================
				_register.launchapplication(PaceURL);
				_driver.manage().window().maximize();
				_driver.manage().timeouts().implicitlyWait(20,TimeUnit.SECONDS);
				
				WorkflowIntegrationPage WIP = new WorkflowIntegrationPage(_driver);
				DCPage DC = new DCPage(_driver);
				
				System.out.println("Loging in to Pace");
				DC.EpaceLogin(PaceUserN, PacePass, PaceCompany);
				
				//enable scheduling pace connects
				System.out.println("Enable the Scheduling Pace Connects");
				WIP.DisableEnablePaceConnects("Scheduling", "enable", PaceServer, PaceCompany);
				
				//enable process shipper pace connects
				System.out.println("Enable the Process Shipper Pace Connects");
				WIP.DisableEnablePaceConnects("Smartlinc Process Shipper", "enable", PaceServer, PaceCompany);
				
				DC.Logout();								

				//============================= DSF prerequisites========================
				_register.launchapplication(SiteUrl);
				_driver.manage().window().maximize();
				_driver.manage().timeouts().implicitlyWait(20,TimeUnit.SECONDS);
				
				Login Login1 = new Login(_driver);
				Buyyer_Work_flow bwf = new Buyyer_Work_flow();
				Storefront sfront = new Storefront(_driver);
				DSF_Integration_Page DSF = new DSF_Integration_Page(_driver);

				//Login as administrator user
				System.out.println("Loging in to DSF");
				Login1.LoginToDSF(sSheetName, sScenario, sTestcase, "administrator", "administrator");
				
				//Enable communication channel
				System.out.println("Enable Communication channel");
				sfront.navigateToAdministrationPage();
				//DSF.Communication_Channels(WordUtils.capitalize(CommChannel), CommChannel);
				//DSF.Get_License_ID(WordUtils.capitalize(CommChannel));
				
				DSF.Logout();
								
				//====================================Place an Order in DSF with adhoc product======================================
				String product_qty=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "Product_Qty");
				String DeliveryMethod=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "DeliveryMethod");
				String PaymentMethod=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "PaymentMethod");
				String PONumber=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "PONumber");
				String Width=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "Width");
				String Height=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "Height");
				String BackCoverOption=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "BackCoverOption");
				String FrontCoverOption=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "FrontCoverOption");
				String ProductName2=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "Product2Name");
				String ProductName3=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "Product3Name");
				String ProductName4=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "Product4Name");
				String Quantity1=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "Product_Qty");
				String Quantity2=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "Product2_Qty");
				String Quantity3=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "Product3_Qty");
				String Quantity4=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "Product4_Qty");
				
				
				
				//Login as user
				Login1.LoginToDSF(sSheetName, sScenario, sTestcase, userName, passWord);

				//Clear Cart
				CommonFunctions.ClearCart(_driver);

				//Search a product1 and add to Cart
				bwf.searchProductAndBuy(ProductName);
				bwf.BuyWithQuantityandAddtoCart(Quantity1);
				
				
				bwf.searchProductAndBuy(ProductName2);
				bwf.BuyWithQuantityandAddtoCart(Quantity2);
				//Search a product1 and add to Cart
				bwf.searchProductAndBuyWithQuantity(ProductName3, Quantity3);
				//bwf.BuyWithQuantityandAddtoCart(Quantity2);
				
			

				
				//Search a product1 and add to Cart
				bwf.searchProductAndBuy(ProductName4);
				bwf.BuyWithQuantityandAddtoCart(Quantity4);
//
//				bwf.enterFinalHeight_Width(Width, Height);
//				
//				bwf.selectBackCoverFirstLevelOption(BackCoverOption);
//				
//				bwf.selectFrontCoverFirstLevelOption(FrontCoverOption);
//				
//				bwf.selectOrientation(sSheetName, sScenario, sTestcase);
//	  		
//				bwf.Addto_Cart();
	  			
	  		   // bwf.changeQty_From_Cart(product_qty);
	  			
	  			//Proceed to check out
				bwf.Click_On_ProceedTOCheckOut();

				//Select a delivery method
				sfront.choose_ShipmentMethodBasedOnValue(DeliveryMethod);
				
			   //Click on proceed to payment button
				sfront.ProceedToPayment();
				
				//Choose the credit card payment option
				bwf.choose_PaymentMethod(PaymentMethod);
				//bwf.choose_PO_PaymentMethod_Enter_PO_number(PaymentMethod, PONumber);
				
				//place order
				bwf.click_on_PlaceMyOrder();
				String orderNum=bwf.fetch_OrderNumber();
				System.out.println("DSF Order No is ::"+orderNum);
				
				//get billing details				
				String subTotalValue_Before_code_apply = _driver.findElement(By.xpath(Locators.getProperty(Locators.Cart_Subtotal_value))).getText();
	//			String ShippingAmount_Before_code_apply= _driver.findElement(By.xpath(Locators.getProperty(Locators.Cart_Shipping_value))).getText();
				String TotalValue_Before_code_apply =	 _driver.findElement(By.xpath(Locators.getProperty(Locators.Cart_Total))).getText();
				String TaxCharge_Before_code_apply = _driver.findElement(By.xpath(Locators.getProperty(Locators.Tax_Charges))).getText();
				String HandlingCharge_Before_code_apply = _driver.findElement(By.xpath(Locators.getProperty(Locators.Handling_Charges))).getText();
	//			System.out.println("Shipping amount :"+ShippingAmount_Before_code_apply);
				System.out.println("SubTotal Value :"+subTotalValue_Before_code_apply);
				System.out.println("Total Value :"+TotalValue_Before_code_apply);
				System.out.println("Tax Charge :"+TaxCharge_Before_code_apply);
				System.out.println("Handling Charge :"+HandlingCharge_Before_code_apply);
				
				dbConnection.UpdateFunction(sSheetName, sScenario, sTestcase, "DSFSubTotal",subTotalValue_Before_code_apply);
//				dbConnection.UpdateFunction(sSheetName, sScenario, sTestcase, "DSFShippingAmount",ShippingAmount_Before_code_apply);
				dbConnection.UpdateFunction(sSheetName, sScenario, sTestcase, "DSFTotalAmt",TotalValue_Before_code_apply);
				dbConnection.UpdateFunction(sSheetName, sScenario, sTestcase, "DSFTaxAmount",TaxCharge_Before_code_apply);
				dbConnection.UpdateFunction(sSheetName, sScenario, sTestcase, "DSFHandlingAmount",HandlingCharge_Before_code_apply);				
				dbConnection.UpdateFunction(sSheetName, sScenario, sTestcase, "Order_Number", orderNum);
				
				Login1.Logout();
				bwf.End_Print_Console(sTestcase);				

				long endTime = System.nanoTime();		
				long durations = (endTime - startTime);
				double durations1 = (double)durations / 1000000000.0;
				System.out.println("Execution Time in Seconds::"+new DecimalFormat("#.###").format(durations1));
				durations1 = durations1/60;	
				String ExecutionTimeInMinutes=new DecimalFormat("#.###").format(durations1);
				System.out.println("Execution Time In minutes::"+ExecutionTimeInMinutes);
				dbConnection.UpdateFunction(sSheetName, sScenario, sTestcase, "ExecutionTime",ExecutionTimeInMinutes);				
				
				//========================================== verify Job in Pace =============================================================								
				String sJobNumber="";
				
				_register.launchapplication(PaceURL);
				_driver.manage().window().maximize();
				_driver.manage().timeouts().implicitlyWait(20,TimeUnit.SECONDS);
				//_driver = eyes.open(_driver, "PACE", "TC_11_1", new RectangleSize(1008, 705));
				
				JobPlanningPage JP = new JobPlanningPage(_driver);				
				
				System.out.println("Loging in to Pace");
				DC.EpaceLogin(PaceUserN, PacePass, PaceCompany);
				
				//==========================================================================
				//======================Fetch Job Number using order number=================
				//==========================================================================				
				System.out.println("Fetch Job Number using order number");
				
				String orderNumber = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "Order_Number");
				String sPaceConnect = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "PaceConnect");
				
				DSF.NavigateToActivePaceConnect(sPaceConnect, PaceServer, PaceCompany);
				CommonFunctions.ClickElement(_driver, By.xpath("//a[text()='Successful Executions']"));
				CommonFunctions.waitForPageLoaded(_driver);
				Thread.sleep(1000);
				String sResultMessage = CommonFunctions.GetText(_driver, By.xpath("//table[@id='SuccessResults']/tbody/tr[1]/td[7]/div"));
				while (!(sResultMessage.contains("Success : Created Job#") && sResultMessage.contains("for DSF Order#"+orderNumber)))
				{
					Thread.sleep(4000);
					_driver.navigate().refresh();
					CommonFunctions.waitForPageLoaded(_driver);
					Thread.sleep(1000);
					CommonFunctions.ClickElement(_driver, By.xpath("//a[text()='Successful Executions']"));
					sResultMessage = CommonFunctions.GetText(_driver, By.xpath("//table[@id='SuccessResults']/tbody/tr[1]/td[7]/div"));
				}
				
				sJobNumber = WIP.FetchJobNumber(orderNumber, PaceServer, PaceCompany);
				if(!sJobNumber.equals(""))
				{
					dbConnection.UpdateFunction(sSheetName, sScenario, sTestcase, "PACE_Job_Num", sJobNumber);
					String sJobDescription = CommonFunctions.GetValue(_driver, By.name(Locators.getProperty(Locators.Description)));
					dbConnection.UpdateFunction(sSheetName, sScenario, sTestcase, "Job_Description", sJobDescription);
				}
				else
				{
					Assert.fail("Job Not Created for above Order Number");
				}
				TakeScreenshot.ScreenShotWindow(_driver, "JobDetails");
				_driver.manage().window().maximize();
				Thread.sleep(2000);
								
				//==========================================================================
				//================================Verify Job Products======================
				//==========================================================================
				System.out.println("Verify Job Products");
				
				CommonFunctions.ClickElement(_driver, By.xpath("//a[text()='Products']"));
				
				String totalRecordsProducts = _driver.findElement(By.xpath("//fieldset[@id='JobProducts_fieldset']/div/div[1]/div[1]/strong")).getText();
				System.out.println("totalProducts: "+totalRecordsProducts);
				if (totalRecordsProducts.equals("2"))
				{
					String product1Name = _driver.findElement(By.xpath("//div[@class='table-contents']/table[@id='JobProducts']/tbody/tr[1]/td[3]/input")).getAttribute("value");
					String product2Name = _driver.findElement(By.xpath("//div[@class='table-contents']/table[@id='JobProducts']/tbody/tr[2]/td[3]/input")).getAttribute("value");
					String sPro1 = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "ProductName");
					String sPro2 = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "Product2Name");

					if((product1Name.equals(sPro1) || product1Name.equals(sPro2)) && (product2Name.equals(sPro1) || product2Name.equals(sPro2)) && !product1Name.equals(product2Name))
					{
						System.out.println("Job Product Names have been verified");
					}
					else
					{
						System.err.println("Product 1 = "+product1Name+", Product 2 = "+product2Name);
						Assert.fail("Product 1 = "+product1Name+", Product 2 = "+product2Name);
					}
				}
				else
				{
					System.err.println("Total Products created are incorrect, Expected = 2, Actual = "+totalRecordsProducts);
					Assert.fail("Total Products created are incorrect, Expected = 2, Actual = "+totalRecordsProducts);
				}
				
				//==========================================================================
				//==========Verify Job Value, Shipping, Handling and Taxes Amount in Billing Tab==========
				//==========================================================================
				System.out.println("Verify Job Value,W2P Shipping,W2P Handling and W2P Taxes AMount in Billing Tab");
				
				String sJobValue = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "DSFSubTotal");
				String sTax = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "DSFTaxAmount");
				String sShipping = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "DSFShippingAmount");
				String sHandling = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "DSFHandlingAmount");
				
				boolean IsBillingDetailsVerified = DSF.Verify_JobValue_Shipping_Handling_Taxes_Amount_On_Job_Billing_Tab(sJobValue, sTax, sShipping, sHandling);
				
				if(IsBillingDetailsVerified==true)
				{
					System.out.println("Verified Job Value, W2P Shipping, W2P Handling and W2P Taxes field is not editable in Billing Tab");
				}
				else
				{
					Assert.fail("Failed to Verify Job Value, W2P Shipping, W2P Handling and W2P Taxes Amount in pace. IsNotEditableSuccess is "+IsBillingDetailsVerified);
				}
				
				System.out.println("Verify payment method in pace for DSF order");
				String sPaymentMode="PO Number";
				
				String[] PaymentOption_And_Value= DSF.Verify_The_Payment_Mode_In_Pace();
				if(PaymentOption_And_Value[0].equals(sPaymentMode))
				{
					System.out.println("The Payment Mode displayed are correct");
				}
				else
				{
					System.err.println("Payment Method, Expected = PO Number, Actual= "+sPaymentMode);
					Assert.fail("Payment Method, Expected = PO Number, Actual= "+sPaymentMode);
				}
				
				//==========================================================================
				//===================Verify the Job Parts created===========================
				//==========================================================================
				System.out.println("Verify Job Parts");
				
				CommonFunctions.ClickElement(_driver, By.xpath("//a[text()='Parts Info']"));
				((JavascriptExecutor) _driver).executeScript("arguments[0].scrollIntoView();", _driver.findElement(By.xpath("//fieldset[contains(@id,'JobPart_N')]")));
				TakeScreenshot.ScreenShotRegion(_driver, By.xpath("//fieldset[contains(@id,'JobPart_N')]"), "JobParts");
								
				int iNumofJobPartsCreated = CommonFunctions.RowCount(_driver, By.xpath("//table[@id='JobPart_N1002F']/tbody/tr"));				
				if (iNumofJobPartsCreated == 5)
				{
					System.out.println("Iterate through each part and verify Job Part Details");
					
					for (int i=2; i<=iNumofJobPartsCreated; i++)
					{
						CommonFunctions.ClickElement(_driver, By.xpath("//table[@id='JobPart_N1002F']/tbody/tr["+i+"]/td[3]/div/a/img"));
						CommonFunctions.waitForPageLoaded(_driver);
						CommonFunctions.Wait(_driver, By.name("additionalDescription"));
						System.out.println("Verifying Job Part "+(i-1));
						
						//verify General details
						CommonFunctions.ClickElement(_driver, By.xpath("//div[@id='tabBar']//span[text()='G']"));
						((JavascriptExecutor) _driver).executeScript("arguments[0].scrollIntoView();", _driver.findElement(By.xpath("//div[@id='scrollableContent']/div[@id='contents']/div[@class='active']")));
						TakeScreenshot.ScreenShotRegion(_driver, By.xpath("//div[@id='scrollableContent']/div[@id='contents']/div[@class='active']"), "GeneralDetails_Part"+(i-1));
												
						//verify Material details						
						CommonFunctions.ClickElement(_driver, By.xpath("//div[@id='tabBar']//span[text()='M']"));
						((JavascriptExecutor) _driver).executeScript("arguments[0].scrollIntoView();", _driver.findElement(By.xpath("//fieldset[contains(@id, 'JobMaterial')]")));
						TakeScreenshot.ScreenShotRegion(_driver, By.xpath("//fieldset[contains(@id, 'JobMaterial')]"), "JobMaterialDetails_Part"+(i-1));
						
						//verify pre-press operations
						CommonFunctions.ClickElement(_driver, By.xpath("//div[@id='tabBar']//span[text()='P']"));
						((JavascriptExecutor) _driver).executeScript("arguments[0].scrollIntoView();", _driver.findElement(By.xpath("//fieldset[contains(@id, 'JobPartPrePressOp')]")));
						TakeScreenshot.ScreenShotRegion(_driver, By.xpath("//fieldset[contains(@id, 'JobPartPrePressOp')]"), "PrepressOperations_Part"+(i-1));
						
						//verify press info
						CommonFunctions.ClickElement(_driver, By.xpath("//div[@id='tabBar']//span[text()='r']"));
						((JavascriptExecutor) _driver).executeScript("arguments[0].scrollIntoView();", _driver.findElement(By.xpath("//fieldset[contains(@id, 'JobPartPressForm')]")));
						TakeScreenshot.ScreenShotRegion(_driver, By.xpath("//fieldset[contains(@id, 'JobPartPressForm')]"), "JobPartPressForm_Part"+(i-1));
						
						if (CommonFunctions.RowCount(_driver, By.xpath("//table[contains(@id,'JobPartPressForm')]/tbody/tr")) > 0)
						{							
							String sOriginalWindow = _driver.getWindowHandle();
							CommonFunctions.ClickElement(_driver, By.xpath("//table[contains(@id,'JobPartPressForm')]/tbody/tr[1]/td[2]/div/a/img"));
							Thread.sleep(3000);
							CommonFunctions.SwitchToWindow(_driver, "Job Part Press Form");
							_driver.manage().window().maximize();
							Thread.sleep(1000);
							((JavascriptExecutor) _driver).executeScript("arguments[0].scrollIntoView();", _driver.findElement(By.xpath("//div[@id='scrollableContent']/div[@id='contents']/div[@class='active']")));
							TakeScreenshot.ScreenShotRegion(_driver, By.xpath("//div[@id='scrollableContent']/div[@id='contents']/div[@class='active']"), "JPPFDetails_Part"+(i-1));
							_driver.close();
							_driver.switchTo().window(sOriginalWindow);							
						}
						
						//verify finishing operations
						CommonFunctions.ClickElement(_driver, By.xpath("//div[@id='tabBar']//span[text()='F']"));
						((JavascriptExecutor) _driver).executeScript("arguments[0].scrollIntoView();", _driver.findElement(By.xpath("//fieldset[contains(@id, 'JobPartFinishingOp')]")));
						TakeScreenshot.ScreenShotRegion(_driver, By.xpath("//fieldset[contains(@id, 'JobPartFinishingOp')]"), "JobPartFinishingOpe_Part"+(i-1));
						
						//verify pace connect content files
						CommonFunctions.ClickElement(_driver, By.xpath("//a[text()='PaceConnect']"));
						if (CommonFunctions.isElementPresent(_driver, By.xpath("//fieldset[contains(@id, 'JobPartContentFile')]")))
						{
							((JavascriptExecutor) _driver).executeScript("arguments[0].scrollIntoView();", _driver.findElement(By.xpath("//fieldset[contains(@id, 'JobPartContentFile')]")));
							TakeScreenshot.ScreenShotRegion(_driver, By.xpath("//fieldset[contains(@id, 'JobPartContentFile')]"), "PaceConnectContentFiles_Part"+(i-1));
						}
						
						WIP.NavigateToJob(sJobNumber, PaceServer, PaceCompany);
						CommonFunctions.waitForPageLoaded(_driver);
						CommonFunctions.ClickElement(_driver, By.xpath("//a[text()='Parts Info']"));
						Thread.sleep(1000);
					}
				}
				else
				{
					System.err.println("Total Job Parts created are incorrect, Expected = 4, Actual = "+iNumofJobPartsCreated);
					Assert.fail("Total Job Parts created are incorrect, Expected = 4, Actual = "+iNumofJobPartsCreated);
				}
				
				//==========================================================================
				//===================Verify the Job Plans created===========================
				//==========================================================================
				System.out.println("Navigate to Job Plan Production page");
				WIP.navigateToProductionPlanPage(sJobNumber, PaceServer, PaceCompany);
				
				System.out.println("Verify Job Plans");
				int iJobPlanCnt = CommonFunctions.RowCount(_driver, By.xpath("//table[@id='JobPlan']/tbody/tr"));
				if(iJobPlanCnt == 12)
				{
					((JavascriptExecutor) _driver).executeScript("arguments[0].scrollIntoView();", _driver.findElement(By.xpath("//table[@id='JobPlan']/tbody/tr[1]")));
					TakeScreenshot.ScreenShotRegion(_driver, By.xpath("//table[@id='JobPlan']"), "ProductionPlans_1");
					
					((JavascriptExecutor) _driver).executeScript("arguments[0].scrollIntoView();", _driver.findElement(By.xpath("//table[@id='JobPlan']/tbody/tr[6]")));
					TakeScreenshot.ScreenShotRegion(_driver, By.xpath("//table[@id='JobPlan']"), "ProductionPlan_2");
					
					String sJobPlanIDs = JP.getJobPlans();
					dbConnection.UpdateFunction(sSheetName, sScenario, sTestcase, "JobPlanIDs", sJobPlanIDs);
				}
				else
				{
					System.err.println("Total Job Plans created are incorrect, Expected = 12, Actual = "+iJobPlanCnt);
					Assert.fail("Total Job Plans created are incorrect, Expected = 12, Actual = "+iJobPlanCnt);
				}			
				
				System.out.println("Verify the Job is scheduled");
				if (WIP.verifyJobPlansScheduledCheckBox(12))
				{
					System.out.println("Job was schedueld");
				}
				else
				{
					System.err.println("Job was not scheduled");
					Assert.fail("Job was not scheduled");
				}
				
				//==========================================================================
				//===================Verify the Job shipment created========================
				//==========================================================================
				System.out.println("Navigate to Job Shipment Detail page");
				CommonFunctions.ClickElement(_driver, By.xpath("//a[text()='Job : "+sJobNumber+"']"));				
				Thread.sleep(1000);
				CommonFunctions.ClickElement(_driver, By.xpath("//a[text()='- Shipments']"));
				CommonFunctions.waitForPageLoaded(_driver);
				CommonFunctions.Wait(_driver, By.name("shipmentTypefieldIteration0"));
				
				System.out.println("Verify Job Shipment details");
				if (CommonFunctions.RowCount(_driver, By.xpath("//div[contains(@id, 'shipmentBox')]")) == 1)
				{
					CommonFunctions.ClickElement(_driver, By.xpath("//div[@id='shipmentBox0']/div[1]/span/div[1]//img[@title='View Object']"));
					CommonFunctions.waitForPageLoaded(_driver);
					CommonFunctions.Wait(_driver, By.xpath(Locators.getProperty(Locators.Delete)));
					
					CommonFunctions.ClickElement(_driver, By.xpath("//a[text()='General Shipment']"));
					TakeScreenshot.ScreenShotRegion(_driver, By.xpath("//div[@class='active']"), "JobShipmentDetails_TC11");
					
					CommonFunctions.ClickElement(_driver, By.xpath("//a[text()='Shipment Address']"));
					TakeScreenshot.ScreenShotRegion(_driver, By.xpath("//div[@class='active']"), "JobShipmentContactDetails_TC11");
										
					String sJobShipmentID = CommonFunctions.getIDfromURL(_driver);
					dbConnection.UpdateFunction(sSheetName, sScenario, sTestcase, "JobShipmentID", sJobShipmentID);
				}
				else
				{
					System.err.println("No Job shipment was created");
					Assert.fail("No Job shipment was created");
				}
				
				DC.Logout();
				//eyes.close();
			}
			catch (Exception e)
			{
				e.printStackTrace();
				TakeScreenshot.ScreenShotWindow(_driver, sTestcase);
				Assert.fail(sTestcase+" failed");
			}
		}
	}

	
}
