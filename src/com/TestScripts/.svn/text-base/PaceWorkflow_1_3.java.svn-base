package com.TestScripts;

import static org.junit.Assert.*;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.TimeUnit;

import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.support.PageFactory;

import com.TestScripts.RetryTest.Retry;
//import com.applitools.eyes.Eyes;
//import com.applitools.eyes.RectangleSize;
import com.gui_auto.base_classes.GUI_automation_base;
import com.gui_auto.base_classes.GUI_automation_properties;
import com.gui_auto.dao.ReadAndUpdate;
import com.gui_auto.pages.DCPage;
import com.gui_auto.pages.RegisterPage;
import com.gui_auto.pages.WorkflowIntegrationPage;
import com.gui_auto.utilities.CommonFunctions;
import com.gui_auto.utilities.ScreenShot;

public class PaceWorkflow_1_3 extends GUI_automation_base
{
	ReadAndUpdate dbConnection = new ReadAndUpdate();
	ScreenShot TakeScreenshot = new ScreenShot();
	String browser= _properties.getProperty(GUI_automation_properties.BASEURL);
	String sFile = _properties.getProperty(GUI_automation_properties.ScreenShotPath);
	//public static Eyes eyes;
	
	long maxWait=10000;
	File directory = new File(sFile);

	private RegisterPage _register;
	RetryTest Retry = new RetryTest();

	@Rule
	public Retry retry = Retry.new Retry(1);

	@Before
	public void setUp() throws Exception
	{		
		//eyes = new Eyes();
		//eyes.setApiKey("U4H2HXkiij105f7H1jedc103H9d2tRA8Hdua6DepWhuic110");
		//eyes.setForceFullPageScreenshot(true);
	}

	public String dateReturn()
	{	
		Date date = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy-HH:mm");	
		return sdf.format(date);
	}

	@After
	public void tearDown() throws Exception 
	{		   
		_driver.quit();
	}
	
	public static void Killpython() throws Exception   
	{
		Process p = Runtime.getRuntime().exec("cmd /c taskkill /F /IM python.exe *32 /T");
		p.destroy();
	}
	
	@Test
	public void TC_1_3 () throws Exception
	{	
		//=======================================================================
		//Constant ones....
		//=======================================================================
		
		String sSheetName="IntegrationWF";
		String  sScenario = "WorkFlow";
		String dater = dateReturn();
		String sTestcase = dbConnection.ReadFunction("PresentWorkflow", "PresentWorkflow", "PresentWorkflow", "TestCase_Executing");
		dbConnection.UpdateFunction(sSheetName,sScenario,sTestcase,"Executed_On",dater);
		//========================================================================
		
		String Exec_Required= dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "Execution_Required");
		
		if (Exec_Required.equalsIgnoreCase("Yes"))
		{
			try
			{
				String PaceURL=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "PACEURL");
				String PaceUserN=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "PACEUserName");
				String PacePass=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "PACEPassword");
				String PaceCompany=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "PACECompany");
				String PaceServer=dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "PACEServer");
				
				String sJobNumber= dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "PACE_Job_Num");
								
				//========================================== verify Updated Job plans in Pace =============================================================		
				
				super.setUp(getBrowser());
				_register = PageFactory.initElements(_driver, RegisterPage.class);
				_register.launchapplication(PaceURL);
				_driver.manage().window().maximize();
				_driver.manage().timeouts().implicitlyWait(20,TimeUnit.SECONDS);
				//_driver = eyes.open(_driver, "PACE", "TC_1_3", new RectangleSize(1008, 705));
				
				DCPage DC = new DCPage(_driver);
				WorkflowIntegrationPage WIP = new WorkflowIntegrationPage(_driver);
				
				System.out.println("Loging in to Pace");
				DC.EpaceLogin(PaceUserN, PacePass, PaceCompany);
												
				//==========================================================================
				//===================Verify the Job Plans are updated with start and end dates===========================
				//==========================================================================				
				System.out.println("Navigate to Job Plan Production page");
				WIP.navigateToProductionPlanPage(sJobNumber, PaceServer, PaceCompany);
				
				System.out.println("Verify Job Plans are updated with start and end times");				
				String sJobPlans = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "JobPlanIDs");
				String[] aJobPlans = sJobPlans.split(";");
				String sStartDates = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "StartDates");
				String[] aStartDates = sStartDates.split(";");
				String sEndDates = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "EndDates");
				String[] aEndDates = sEndDates.split(";");
				
				String sOriginalWindow = _driver.getWindowHandle();
				int iJobPlanCnt = CommonFunctions.RowCount(_driver, By.xpath("//table[@id='JobPlan']/tbody/tr"));
				for (int i=1; i<=iJobPlanCnt; i++)
				{
					CommonFunctions.ClickElement(_driver, By.xpath("//table[@id='JobPlan']/tbody/tr["+i+"]/td[2]/div/a/img"));
					Thread.sleep(3000);
					CommonFunctions.SwitchToWindow(_driver, "Job Plan");
					String sStartDate = CommonFunctions.GetValue(_driver, By.name("startDate"))+" "+CommonFunctions.GetValue(_driver, By.name("startTime"));
					String sStartDateExpected = CommonFunctions.changeFormat(aStartDates[i-1], "dd.MM.yyyy hh:mm:ss a", "MM/dd/yyyy h:mm a").trim();
					String sEndDate = CommonFunctions.GetValue(_driver, By.name("endDate"))+" "+CommonFunctions.GetValue(_driver, By.name("endTime"));
					String sEndDateExpected = CommonFunctions.changeFormat(aEndDates[i-1], "dd.MM.yyyy hh:mm:ss a", "MM/dd/yyyy h:mm a").trim();
					
					if (sStartDate.equals(sStartDateExpected) && sEndDate.equals(sEndDateExpected))
					{
						System.out.println("Job Plan "+aJobPlans[i-1]+" is updated with correct start and end scheudled time");
					}
					else
					{
						System.err.println("Job Plan "+aJobPlans[i-1]+"" +
											"\nStart Details, Expected = "+sStartDateExpected+", Actual = "+sStartDate+
											"\nEnd Details, Expected = "+sEndDateExpected+", Actual = "+sEndDate);
						Assert.fail("Job Plan "+aJobPlans[i-1]+" is not updated with correct start and end scheudled time");
					}
					_driver.close();
					Thread.sleep(1000);
					CommonFunctions.getPopupMessage(_driver);
					_driver.switchTo().window(sOriginalWindow);
				}
				
				((JavascriptExecutor) _driver).executeScript("arguments[0].scrollIntoView();", _driver.findElement(By.xpath("//table[@id='JobPlan']/tbody/tr[1]")));
				TakeScreenshot.ScreenShotRegion(_driver, By.xpath("//table[@id='JobPlan']"), "ProductionPlans_Scheduled");			
				
				//==========================================================================
				//===================Send and Print the Job in Fiery===========================
				//==========================================================================
				
				System.out.println("Change the admin status of Job and send the Job to Fiery");
				CommonFunctions.selectDropdownByText(_driver, By.name("adminStatus"), "Production Ready");
				DC.Update();
				
				String sJobPartDesc = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "JobPart1_Description");
				String sPythonScirptPath = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "PythonScriptPath");
				String JobNameFiery="01-1: "+sJobPartDesc;
				
				System.out.println("===============Calling Python Caller to run the script for CWS======================");
		    	WIP.CallPythonScript(JobNameFiery, sPythonScirptPath);
		    	Thread.sleep(5000);
		    	Killpython();
		    	
		    	System.out.println("Verify the Job data displayed in Fiery");
		    	String sJobQuantity = dbConnection.ReadFunction(sSheetName, sScenario, sTestcase, "Product_Qty");
		    	String sNumofCopiesInfiery = dbConnection.ReadCellValue("FieryData", "Fields", "NumOfCopies", sTestcase);
		    	String sStapleInfiery = dbConnection.ReadCellValue("FieryData", "Fields", "Staple", sTestcase);
		    	
		    	if(sNumofCopiesInfiery.equals(sJobQuantity) && sStapleInfiery.equals("Left top single"))
		    	{
		    		System.out.println("All the Job data in Fiery was displayed correctly");
		    	}
		    	else
		    	{
		    		System.err.println("Job Quantiy, Expected = "+sJobQuantity+", Actual = "+sNumofCopiesInfiery+
		    							"\nStaples, Expected = Left top single, Actual = "+sStapleInfiery);
		    		//Assert.fail("Job details displayed in Fiery were incorrect");
		    	}
		    	
		    	//==========================================================================
				//===================Verify the Job Plans are updated===========================
				//==========================================================================
		    	
		    	_driver.manage().window().maximize();
		    	_driver.navigate().refresh();
		    	CommonFunctions.waitForPageLoaded(_driver);
		    	String sJobPlanStatus = CommonFunctions.GetSelectedOption(_driver, By.xpath("//table[@id='JobPlan']/tbody/tr[1]//select[@name='JobPlan.status']"));
		    	assertTrue("Job status, Expected = Run / Working On or Makeready, Actual = "+sJobPlanStatus, (sJobPlanStatus.equals("Run / Working On") || sJobPlanStatus.equals("Makeready")));
		    	
		    	System.out.println("Wait for Job to be printed in Fiery");
		    	int i = 5;
		    	while (!sJobPlanStatus.equals("Process Complete") && i < 10)
		    	{
		    		Thread.sleep(5000);
		    		System.out.println("Wait time = "+i*5+" seconds");
		    		_driver.navigate().refresh();
		    		CommonFunctions.waitForPageLoaded(_driver);
		    		sJobPlanStatus = CommonFunctions.GetSelectedOption(_driver, By.xpath("//table[@id='JobPlan']/tbody/tr[1]//select[@name='JobPlan.status']"));
		    		i = i++;
		    	}
			    
				_driver.navigate().refresh();
		    	CommonFunctions.waitForPageLoaded(_driver);
		    	sJobPlanStatus = CommonFunctions.GetSelectedOption(_driver, By.xpath("//table[@id='JobPlan']/tbody/tr[1]//select[@name='JobPlan.status']"));
		    	assertTrue("Job status, Expected = Process Complete, Actual = "+sJobPlanStatus, sJobPlanStatus.equals("Process Complete"));
		    	
		    	System.out.println("Complete the remaining Job plan manually");
		    	CommonFunctions.selectDropdownByText(_driver, By.xpath("//table[@id='JobPlan']/tbody/tr[2]//select[@name='JobPlan.status']"), "Process Complete");
		    	DC.Update();
				
				DC.Logout();
			}
			catch (Exception e)
			{
				e.printStackTrace();
				TakeScreenshot.ScreenShotWindow(_driver, sTestcase);
				Assert.fail(sTestcase+" failed");
			}
		}
	}

}
